apiVersion: certmanager.k8s.io/v1alpha1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: ryan.hochstetler@gmail.com
    privateKeySecretRef:
      name: letsencrypt-prod
    http01: {}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: "pr-dashboard-deployment"
spec:
  replicas: 1
  revisionHistoryLimit: 2
  template:
    metadata:
      labels:
        app: "github-pr-dashboard"
    spec:
      containers:
        - name: pr-dashboard
          image:  us.gcr.io/round-ring-181705/github-pr-dashboard:latest
          ports:
          - containerPort: 8080
          env:
          - name: DASHBOARD_NAME
            value: "Dashboard"
          - name: REPOSITORY_NAMES
            value: "kubernetes/ingress-nginx kubernetes/examples"
          - name: GROUP_BY_REPO
            value: "false"
          - name: GITHUB_TOKEN
            value: "02f488abd96e61c685c93383644a467186bb193d"
          imagePullPolicy: IfNotPresent
        - name: oauth2-proxy
          image: docker.io/colemickens/oauth2_proxy:latest
          imagePullPolicy: Always
          ports:
          - containerPort: 4180
            protocol: TCP
          args:
          - --provider=github
          - --email-domain=*
          - --upstream=http://localhost:8080
          - --http-address=0.0.0.0:4180
          # Register a new application
          # https://github.com/settings/applications/new
          env:
          # You'll need to change all of these values for use beyond this example.
          - name: OAUTH2_PROXY_CLIENT_ID
            value: d82c2d216220bf82ad7e
          - name: OAUTH2_PROXY_CLIENT_SECRET
            value: 55bc1af6cb521a022d29d4ecdeca01de860ccafa
          # python -c 'import os,base64; print base64.b64encode(os.urandom(16))'
          - name: OAUTH2_PROXY_COOKIE_SECRET
            value: wRt7p2uX5DJJRDjoO4Pifg==
---
apiVersion: v1
kind: Service
metadata:
  name: "pr-dashboard-service"
spec:
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4180
  selector:
    app: "github-pr-dashboard"
  sessionAffinity: None
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: "pr-dashboard-ingress"
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    certmanager.k8s.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - ryan-hochstetler.ryanh.org
    secretName: pr-dashboard-ingress
  backend:
    serviceName: pr-dashboard-service
    servicePort: 80
  rules:
  - host: ryan-hochstetler.ryanh.org
    http:
      paths:
      - path: /
        backend:
          serviceName: pr-dashboard-service
          servicePort: 80
